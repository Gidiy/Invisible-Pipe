import math
import random
import serial
import time

import matplotlib.animation as animation
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

arduino = serial.Serial('COM9', 9600)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

location_x = 0
location_y = 0
location_z = 0
time_elapsed = 0


def vector(x_angle, y_angle, z_angle, vector_length): #recieve angle and length and build a vector
    x = vector_length * math.sin(x_angle)
    y = vector_length * math.sin(y_angle)
    z = vector_length * math.sin(z_angle)
    return [x, y, z]


def degrees_to_radians(degrees): #convert degrees to radians
    return degrees * math.pi / 180


def plot_vector(vec, color): #recieve vector and color and draw an arrow between 2 dots on the 3D plot and update the last location that drew
    global location_x
    global location_y
    global location_z

    ax.quiver(location_x, location_y, location_z, vec[0], vec[1], vec[2], color=color)
    location_x += vec[0]
    location_y += vec[1]
    location_z += vec[2]


def animate(frame):
    global time_elapsed

    data = arduino.readline().decode('latin1', errors='ignore').rstrip()
    values = data.split(',')

    try:
        status, pitch, roll, yaw = map(int, values)

        print(f"Status: {status}, Pitch: {pitch}, Roll: {roll}, Yaw: {yaw}")
        match 3:
            case 1:
                plot_vector(vector(0.9 - frame * 0.3, 0.955, 0.955, math.sqrt(5)), color='y') # original code
                time.sleep(0.1)
            case 2:
                plot_vector(vector(degrees_to_radians(30), degrees_to_radians(0), degrees_to_radians(15), math.sqrt(5)),color='y') #test
                time.sleep(0.1)

            case 3:
                plot_vector(vector(degrees_to_radians(pitch), degrees_to_radians(roll), degrees_to_radians(yaw), math.sqrt(5)), color='y') #with data



        ax.autoscale()
        ax.set_xlabel(f'Time elapsed: {time_elapsed:.2f}s')
        ax.set_ylabel(f"Status: {status}, Pitch: {pitch}, Roll: {roll}, Yaw: {yaw}")
    except ValueError as e:
        print(f"Error converting values to integers: {e}")

    time_elapsed += 0.01



ax.set_title('SneakIn')

ani = animation.FuncAnimation(fig, animate, interval=0.01, frames=10)

plt.show()

